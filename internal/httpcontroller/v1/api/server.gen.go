//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/arch/{taskID})
	GetArchive(w http.ResponseWriter, r *http.Request, taskID int)

	// (POST /api/v1/task)
	CreateTask(w http.ResponseWriter, r *http.Request)

	// (PATCH /api/v1/task/{taskID})
	AppendLink(w http.ResponseWriter, r *http.Request, taskID int)
	// Send a set of links
	// (POST /api/v1/upload)
	SetOfLinks(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetArchive operation middleware
func (siw *ServerInterfaceWrapper) GetArchive(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", r.PathValue("taskID"), &taskID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArchive(w, r, taskID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AppendLink operation middleware
func (siw *ServerInterfaceWrapper) AppendLink(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", r.PathValue("taskID"), &taskID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AppendLink(w, r, taskID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetOfLinks operation middleware
func (siw *ServerInterfaceWrapper) SetOfLinks(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetOfLinks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/v1/arch/{taskID}", wrapper.GetArchive)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/task", wrapper.CreateTask)
	m.HandleFunc("PATCH "+options.BaseURL+"/api/v1/task/{taskID}", wrapper.AppendLink)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/upload", wrapper.SetOfLinks)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXXW/bNhT9K8TdgL0olt1mQKG3rCkGA0EHtBkwoMgDLV5ZTCSSJa+ceIb++0BKsixL",
	"S5zNKzD0yQpF3Y9zzzlkdpDq0miFihwkO3BpjiUPj1fGoBI3Uj18wq8VOvKLxmqDliSGLYVUD/4Xn3hp",
	"CoQEciLjkjhuV2apLmNZ8jXO7g2uIYJM25ITJFBZCRHQ1vjPHFmp1lDX+xW9useUoI7gyqb5TZtomB6t",
	"1dY/HEWJIJMFfuQlTr7sqn5F7pBOEpbh4UeLGSTwQ9xjF7fAxftq+3DcWr71f3/w9X5CZ7RyOG4n1QIH",
	"aF7OL/dBpCJco/VhBBKXhRsC/1Ez4u6B4ZN05NijpJxRjswZTGUmUbDl9RjvqMewD3Xr4yhNLNOVEqcN",
	"aQ/SPsyXgPMCGrzftL9v4S7qgRxVc4zYZ6Tfsn3sMfleHEfz7WTJvs2JIVjkhMI/7qkqOOEFyRKnABT6",
	"URWai8l+/p6h8vCDg+Ge1FVPyzoCR5wqdxKh/ZJUmQ6bJYVpu5xbvCi3F14zDiLYoHVSK0hgMZvP5j6F",
	"Nqi4kZDA29li5mdqOOUhZ8yNjDeLmNs0j3eegsvr2r9YYzAMgS610lAT8boFi/ntcoNstWVBjiGH5X7b",
	"UkACvyJdNVtCMstLJLQOki/HIZfXTGeB6h6oAglFUAL4ViEJlUIEKrgBNAVCBBa/VtL6QZOtMGqNb2om",
	"9Z3f3Yg2tPxmPm/kqghVaJIbU8g0VB//KU1vpAMaraTidjuhp6Dpw57a1pmr0hSdy6qi2LKOaCj8SC6f",
	"LeLe+TiHVTxHp6EvTdSzVBteSMFsexCE/JffLn+HR29KdQQ/f1sECK3iBXNoN2hZI+wgMb72tAx24uDO",
	"L3WaoM5htJvQwvvgNIwzhY8dY4ciaHbcNq+OKLg4W+8h/kTL4Rjo7DCCHLkICtzBjW4SDY+Nw65j7xEj",
	"SfWEPwG4gZkYTmk+hvBKCNcC6F2EkQ5G4D/8yYUlx5qz5Bja/nJzur+E85U0q4w/EM7sL0FYv2ixPdtc",
	"x/e3APuwsPpV3nYeYvmShtbGQ6nfobEdXbX+F65Wme66M+1rn1GJRnsj1R1c5/4bzh8k+NdkP+NBLgZ0",
	"H5rp+yb7xW2ItXvWNV9SxzlK/l3xVYHe57o7mlbItGWltsi6S+I/aiCCPy4+dDfi0baV1gVy1TY61gHh",
	"E8Wm4FK9ANNoCIpVCp8Mpv5uKKc4z3SaVtYeH3SvmY2/iVdl6VFuNcCZQ/KHR9ETsknanDOVLdr/mJM4",
	"LnTKi1w7St7N382hvqv/CgAA//+TO+Gxmw8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
